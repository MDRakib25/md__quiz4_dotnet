# ASP.NET Core with SonarQube (Docker) Analysis
trigger:
- main

variables:
  buildConfiguration: 'Release'
  sonarProjectKey: 'mvc_app'  # Lowercase, no spaces
  sonarProjectName: 'MVC Application'
  sonarHostUrl: 'http://localhost:9000'  # Or your Docker host IP
  sonarToken: $(SONARQUBE_TOKEN)  # Store this in pipeline variables
  dotnetSdkVersion: '7.0.x'

pool:
  name: 'Default'

steps:
# Install .NET SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '$(dotnetSdkVersion)'

# Install SonarScanner for .NET
- script: |
    dotnet tool install --global dotnet-sonarscanner
  displayName: 'Install SonarScanner'

# Authenticate with SonarQube
- script: |
    dotnet sonarscanner begin /k:"$(sonarProjectKey)" /n:"$(sonarProjectName)" /d:sonar.host.url="$(sonarHostUrl)" /d:sonar.login="$(sonarToken)" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.exclusions="**/wwwroot/**, **/*.css, **/*.html, **/*.js"
  displayName: 'SonarQube: Begin Analysis'

# Build and test
- script: dotnet restore
  displayName: 'Restore packages'

- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'Build solution'

- script: |
    dotnet test --configuration $(buildConfiguration) --logger trx --results-directory TestResults /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=TestResults/coverage/
  displayName: 'Run tests with coverage'

# Complete SonarQube analysis
- script: |
    dotnet sonarscanner end /d:sonar.login="$(sonarToken)"
  displayName: 'SonarQube: End Analysis'

# Publish results
- task: PublishTestResults@2
  inputs:
    testRunner: 'VSTest'
    testResultsFiles: '**/*.trx'

# Publish artifacts
- script: dotnet publish -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)
  displayName: 'Publish application'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'mvc_app'