# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  name: 'Default'

variables:
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '7.0.x'

# ✅ Install SonarScanner CLI
- task: DownloadSecureFile@1
  name: sonarScanner
  inputs:
    secureFile: 'sonar-scanner-cli.zip'  # Upload this in DevOps Library > Secure files

- script: |
    mkdir $(Agent.TempDirectory)\sonarscanner
    tar -xf $(sonarScanner.secureFilePath) -C $(Agent.TempDirectory)\sonarscanner
    echo "##vso[task.setvariable variable=SONAR_SCANNER_HOME]$(Agent.TempDirectory)\sonarscanner\sonar-scanner-4.8.0.2856-windows"
  displayName: 'Extract SonarScanner CLI'

# ✅ Prepare sonar-project.properties dynamically
- script: |
    echo sonar.projectKey=MyAppKey > sonar-project.properties
    echo sonar.projectName=MyAppName >> sonar-project.properties
    echo sonar.sources=. >> sonar-project.properties
    echo sonar.host.url=http://localhost:9000 >> sonar-project.properties
    echo sonar.login=$(SONAR_TOKEN) >> sonar-project.properties
    echo sonar.branch.name= >> sonar-project.properties
  displayName: 'Write sonar-project.properties'

# ✅ Run CLI Scanner (no auto-injected branch)
- script: |
    "$(SONAR_SCANNER_HOME)/bin/sonar-scanner.bat"
  displayName: 'Run SonarScanner CLI'
  env:
    SONAR_TOKEN: $(SonarQubeToken)  # Define this in DevOps pipeline secrets

